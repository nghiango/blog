{"pageProps":{"frontmatter":{"title":"How to simulate AES256 of Jasypt","date":"Jun 23, 2022","excerpt":"Crash course to learn the React JavaScript library. We will look at components, hooks and more","tag":"Nodejs","cover_image":"/images/posts/img5.jpg"},"slug":"how-to-simulate-aes256-jasypt","content":"\r\nJasypt is a lib of Java that has some function of decrypt and encrypt a sensitive information. It is fine if we are only using Java project to encrypt and decrypt sensitive information. However, how about if the sensitive information is encrypted in Java and decrypt in NodeJs project which only has crypto as a cryptographic provider but not specific for AES256, especially the default AES256 of Jasypt.\r\n\r\nTo simulate it, we need to define some values that Jasypt uses to encrypt and decrypt.\r\n\r\n- Argument: 'aes-256-cbc'\r\n- Interations pbkdf2 = 1000\r\n- key lenth pbkdf2 = 32\r\n- digest pbkdf2 = sha512\r\n\r\n```js\r\n/** Function serve Jasypt text: http://www.jasypt.org/encrypting-texts.html\r\n * With default config:\r\n * - Algorithm: PBEWithHmacSHA512AndAES_256\r\n * - Salt: RandomSaltGenerator\r\n * - Iv: RandomIvGenerator\r\n**/\r\nconst crypto = require('crypto');\r\nconst { encryptionPassword } = require('../../config/env');\r\nconst ARGUMENT = 'aes-256-cbc';\r\nconst ITERATIONS_PBKDF2 = 1000;\r\nconst KEY_LENGTH_PBKDF2 = 32;\r\nconst DIGEST_PBKDF2 = 'sha512';\r\nconst BASE64 = 'base64';\r\nconst UTF8 = 'utf8';\r\nconst ENCRYPTION_PASSWORD_PROJECT = 'psd2-consent-mgmt';\r\nlet decryptedEncryptionPassword = '';\r\n\r\nconst encrypt = (sensitiveString) => {\r\n  const salt = crypto.randomBytes(16);\r\n\r\n  let realEncryptionKey = ENCRYPTION_PASSWORD_PROJECT;\r\n  \r\n  if (decryptedEncryptionPassword) {\r\n    realEncryptionKey = decryptedEncryptionPassword;\r\n  }\r\n\r\n  const key = crypto.pbkdf2Sync(realEncryptionKey, salt, ITERATIONS_PBKDF2, KEY_LENGTH_PBKDF2, DIGEST_PBKDF2);\r\n\r\n  const iv = new Buffer(crypto.randomBytes(16), UTF8);\r\n\r\n  const cipher = crypto.createCipheriv(ARGUMENT, key, iv);\r\n\r\n  let encrypted = cipher.update(sensitiveString);\r\n\r\n  encrypted = Buffer.concat([encrypted, cipher.final()]);\r\n  encrypted = Buffer.concat([iv, encrypted]);\r\n  encrypted = Buffer.concat([salt, encrypted]);\r\n\r\n  return encrypted.toString(BASE64);\r\n};\r\n\r\n\r\nconst decrypt = (encryptedString) => {\r\n  const bufferEncryptedStr = Buffer.from(encryptedString, BASE64);\r\n  const salt = new Buffer(16);\r\n  // Follow the implementation of Jasypt, the first 16 bytes are salt\r\n  bufferEncryptedStr.copy(salt, 0, 0, 16);\r\n\r\n  const iv = new Buffer(16);\r\n  // Follow the implementation of Jasypt, the next 16 bytes are IV\r\n  bufferEncryptedStr.copy(iv, 0, 16, 32);\r\n\r\n  const bufferLength = bufferEncryptedStr.length;\r\n  const sensitiveEncrypted = new Buffer(bufferLength - 32);\r\n  // Follow the implementation of Jasypt, the rest bytes are sensitiveEncrypted\r\n  bufferEncryptedStr.copy(sensitiveEncrypted, 0, 32, bufferLength);\r\n  \r\n  let realEncryptionKey = ENCRYPTION_PASSWORD_PROJECT;\r\n  \r\n  if (decryptedEncryptionPassword) {\r\n    realEncryptionKey = decryptedEncryptionPassword;\r\n  }\r\n  const key = crypto.pbkdf2Sync(realEncryptionKey, salt, ITERATIONS_PBKDF2, KEY_LENGTH_PBKDF2, DIGEST_PBKDF2);\r\n\r\n  const decipher = crypto.createDecipheriv(ARGUMENT, key, iv);\r\n  let decrypted;\r\n  decrypted = decipher.update(sensitiveEncrypted);\r\n  decrypted += decipher.final(UTF8);\r\n  return decrypted;\r\n};\r\n\r\ndecryptedEncryptionPassword = decrypt(encryptionPassword);\r\n\r\nmodule.exports = {\r\n  encrypt,\r\n  decrypt\r\n};\r\n```"},"__N_SSG":true}