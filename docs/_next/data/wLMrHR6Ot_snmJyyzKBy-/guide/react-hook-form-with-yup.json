{"pageProps":{"frontmatter":{"title":"The combination between React Hook Form and Yup","date":"Feb 07, 2024","excerpt":"Guide to use React Hook Form with Yup","tag":"reactjs","author":"Nghia Ngo","cover_image":"/images/posts/how-you-understand-nodejs/nodejs-cover.jpeg"},"slug":"react-hook-form-with-yup","content":"# React Hook Form\nReact Hook Form is a library to handle form in React. It's a lightweight library and easy to use. It's also support validation and error handling. The library is built with performance in mind, so it's a good choice for a big project.\n# Yup\nYup is a library to handle validation. It's a schema-based validation library. It's easy to use and support many types of validation. It's also support custom validation and error message.\n# Combination\nWrap a `Input` component with `Controller` and control the value and validation through `control` of `useFormContext` of react-hook-form\n\n```tsx\nimport { useFormContext } from 'react-hook-form';\n\ninterface IProps {\n    name: string;\n}\nconst InputForm = (props: IProps) => {\n    const { control } = useFormContext();\n    \n    return (\n        <Controller\n            name={props.name}\n            control={control}\n            render={({ field }) => (\n                <Input\n                    value={field.value}\n                    onChange={field.onChange}\n                    {...props}\n                />\n            )}\n        />\n    );\n}\n```\n\nTo custom label and error message style, we can wrap `InputForm` with `FromWrapper`.\n\n```tsx\nimport { useFormContext } from 'react-hook-form';\n\ninterface IProps {\n    name: string;\n    label: string;\n    children: React.JSXElement;\n}\n\nconst FormWrapper = (props: IProps) => {\n    const { formState } = useFormContext();\n    return (\n        <>\n            <label>{props.label}</label>\n            {children}\n            <Text type=\"danger\">Error: {formState.errors[props.name]?.message}</Text>\n        </>\n    );\n}\n```\n\nIn the main page we need to define the Yup schema and pass it to resolver of `useForm` to validate the form\n\n```tsx\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\ninterface IFormValues {\n    firstName: string;\n}\n\nconst MainPage = () => {\n    const schema = () => {\n        object({\n            firstName: string().required('First name is required'),\n        })\n    }\n\n    const methods = useForm<IFormValues>({\n        resolver: yupResolver(schema),\n        defaultValues: {\n            firstName: '',\n        }\n    });\n\n    const onSubmit = (value: IFormValues) => {\n    };\n\n    return (\n        <FormProvider {...methods}>\n            <form onSubmit={methods.handleSubmit(onSubmit)}>\n                <FormWrapper name=\"firstName\" label=\"First name\">\n                    <InputForm name=\"firstName\"/>\n                </FormWrapper>\n                <Button onClick={methods.handleSubmit(onSubmit)}>Submit</Button>\n            </form>\n        </FormProvider>\n    );\n}\n```\n"},"__N_SSG":true}