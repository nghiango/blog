{"pageProps":{"frontmatter":{"title":"Custom validation without any lib","date":"Feb 12, 2024","excerpt":"In some project we don't want to use any libs for validation, but we still want to have a good validation system","tag":"reactjs","author":"Nghia Ngo","cover_image":"/images/posts/how-you-understand-nodejs/nodejs-cover.jpeg"},"slug":"custom-validation-without-any-lib","content":"# Why we need a custom validation\nInstead of using a lib for validation, we can achieve validation by our-self. It's not only help us to understand more\nabout the validation system, but also help us to have a suitable validation system for our project.\n## Using hook\n```tsx\nenum InputType {\n    Text = 'text',\n    Number = 'number',\n    Email = 'email',\n    Password = 'password',\n    Date = 'date',\n}\n\ninterface IInputFieldParams {\n    value: T\n    onChange: (value: T) => void\n    validate: (value: T) => string\n    placeholder?: string\n    label?: string\n    type?: string\n    required?: boolean\n    disabled?: boolean\n    className?: string\n    style?: React.CSSProperties\n}\n\nconst useInput = <T, >(params: IInputFieldParams<T>) => {\n    const [value, setValue] = useState<T>(params.value)\n    const [hasError, setHasError] = useState<boolean>(false)\n    const [helperText, setHelperText] = useState<string>(params.helperText)\n    const validationRules = useMemo(() => {\n        const rules = params.validationRules ?? [];\n        if (params.required && !params.disabled) {\n            return isRequiredValidationRule.concat(rules);\n        } else {\n            return rules;\n        }\n    }, [params.required, params.validationRules, params.disabled]);\n\n    const validateRules = (currentValue?: any) => {\n        const currValue = currentValue || value;\n        for (const rule of validationRules) {\n            if (!rule.validate(currValue)) {\n                setHelperText(t(rule.message));\n                setHasError(true);\n                return false;\n            }\n        }\n        setHelperText(params.helperText);\n        setHasError(false);\n        return true;\n    };\n\n    const getInputField = () => {\n        switch (params.type) {\n            case InputFieldType.Text:\n            case InputFieldType.Number:\n                return (\n                    <Input\n                        className={params.className}\n                        key={params.key}\n                        label={params.label}\n                        placeholder={params.placeholder}\n                        popoverInfo={params.popoverInfo}\n                        helperText={helperText}\n                        leadingText={params.leadingText}\n                        leadingIcon={params.leadingIcon}\n                        value={value}\n                        trailingText={params.trailingText}\n                        trailingIcon={params.trailingIcon}\n                        mandatory={params.required}\n                        disabled={params.disabled}\n                        errorText={helperText}\n                        state={getState()}\n                        onBlur={blurHandler}\n                        type={params.type}\n                        onInputChange={valueChangeHandler(params.type)}\n                        id={params.id}\n                    />\n                );\n            default:\n                return null;\n        }\n    };\n    return {\n        value,\n        setValue,\n        hasError,\n        setHasError,\n        inputField: getInputField(),\n        helperText,\n        setHelperText,\n        validateRules,\n        onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n            setValue(e.target.value as any);\n            validateRules(e.target.value);\n        },\n        onBlur: () => {\n            validateRules();\n        },\n    };\n}\n```"},"__N_SSG":true}